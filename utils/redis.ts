import Redis from 'ioredis';

// Configura√ß√£o da conex√£o Redis
const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379', {
  maxRetriesPerRequest: 3,
  enableReadyCheck: false,
  lazyConnect: true,
});

// Event listeners para monitoramento
redis.on('connect', () => {
  console.log('‚úÖ Conectado ao Redis com sucesso!');
});

redis.on('ready', () => {
  console.log('‚úÖ Redis pronto para uso!');
});

redis.on('error', (err) => {
  console.error('‚ùå Erro de conex√£o com Redis:', err.message);
});

redis.on('close', () => {
  console.log('‚ö†Ô∏è Conex√£o com Redis fechada.');
});

redis.on('reconnecting', () => {
  console.log('üîÑ Reconectando ao Redis...');
});

// Fun√ß√£o para testar a conex√£o
export async function testRedisConnection(): Promise<boolean> {
  try {
    await redis.ping();
    console.log('‚úÖ Teste de conex√£o Redis: OK');
    return true;
  } catch (error) {
    console.error('‚ùå Teste de conex√£o Redis falhou:', error);
    return false;
  }
}

// Fun√ß√£o para obter informa√ß√µes do Redis
export async function getRedisInfo() {
  try {
    const info = await redis.info();
    const memory = await redis.info('memory');
    const stats = await redis.info('stats');
    
    return {
      info,
      memory,
      stats,
      connected: redis.status === 'ready',
    };
  } catch (error) {
    console.error('Erro ao obter informa√ß√µes do Redis:', error);
    return null;
  }
}

// Fun√ß√£o para fechar a conex√£o graciosamente
export async function closeRedisConnection() {
  try {
    await redis.quit();
    console.log('‚úÖ Conex√£o Redis fechada graciosamente.');
  } catch (error) {
    console.error('‚ùå Erro ao fechar conex√£o Redis:', error);
  }
}

export default redis;


